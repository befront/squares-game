{"ast":null,"code":"var _jsxFileName = \"/Users/vladislavkorzo/Work/squares-game/src/components/screens/Game/GameScreen.tsx\";\nimport * as React from 'react';\nimport { Screen } from '@components/core/Screen';\nimport { Cell } from './components/Cell';\nimport { PlayerInfo } from './components/PlayerInfo';\nimport { WinModal } from './components/WinModal';\nimport { isCurrentPlayer, getCellColor, getWinPlayerName } from './GameScreen.utils';\nimport * as S from './GameScreen.style';\n;\n\nconst renderRows = (size, selectedCells, players, onCellClick) => Array.from(Array(size)).map((value, rowIndex) => React.createElement(S.Row, {\n  key: rowIndex,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, Array.from(Array(size)).map((value, columnIndex) => React.createElement(Cell, {\n  key: columnIndex,\n  color: getCellColor(rowIndex, columnIndex, players, selectedCells),\n  onClick: () => {\n    onCellClick(rowIndex, columnIndex);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}))));\n\nconst GameScreen = ({\n  isWinModalOpen,\n  selectedCells,\n  boardSize,\n  currentPlayer,\n  players,\n  onCellClick\n}) => React.createElement(Screen, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, React.createElement(WinModal, {\n  isOpen: isWinModalOpen,\n  playerName: getWinPlayerName(players),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}), React.createElement(S.Header, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, Object.keys(players).map(playerId => React.createElement(PlayerInfo, Object.assign({}, players[playerId], {\n  isCurrent: isCurrentPlayer(currentPlayer, players[playerId]),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n})))), React.createElement(S.Inner, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, React.createElement(S.Board, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, renderRows(boardSize, selectedCells, players, onCellClick))));\n\nexport default GameScreen;","map":{"version":3,"sources":["/Users/vladislavkorzo/Work/squares-game/src/components/screens/Game/GameScreen.tsx"],"names":["React","Screen","Cell","PlayerInfo","WinModal","isCurrentPlayer","getCellColor","getWinPlayerName","S","renderRows","size","selectedCells","players","onCellClick","Array","from","map","value","rowIndex","columnIndex","GameScreen","isWinModalOpen","boardSize","currentPlayer","Object","keys","playerId"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,yBAAvB;AAEA,SAASC,IAAT,QAAsB,mBAAtB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AAEA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,gBAAxC,QAAgE,oBAAhE;AAEA,OAAO,KAAKC,CAAZ,MAAmB,oBAAnB;AASC;;AAED,MAAMC,UAAU,GAAG,CACfC,IADe,EAEfC,aAFe,EAGfC,OAHe,EAIfC,WAJe,KAMfC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACJ,IAAD,CAAhB,EAAwBM,GAAxB,CAA4B,CAACC,KAAD,EAAQC,QAAR,KACxB,oBAAC,CAAD,CAAG,GAAH;AAAO,EAAA,GAAG,EAAEA,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACMJ,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACJ,IAAD,CAAhB,EAAwBM,GAAxB,CAA4B,CAACC,KAAD,EAAQE,WAAR,KAC1B,oBAAC,IAAD;AACI,EAAA,GAAG,EAAEA,WADT;AAEI,EAAA,KAAK,EAAEb,YAAY,CAACY,QAAD,EAAWC,WAAX,EAAwBP,OAAxB,EAAiCD,aAAjC,CAFvB;AAGI,EAAA,OAAO,EAAE,MAAM;AAAEE,IAAAA,WAAW,CAACK,QAAD,EAAWC,WAAX,CAAX;AAAoC,GAHzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADN,CADJ,CANJ;;AAkBA,MAAMC,UAA4B,GAAG,CAAC;AAClCC,EAAAA,cADkC;AAElCV,EAAAA,aAFkC;AAGlCW,EAAAA,SAHkC;AAIlCC,EAAAA,aAJkC;AAKlCX,EAAAA,OALkC;AAMlCC,EAAAA;AANkC,CAAD,KAQjC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,QAAD;AACI,EAAA,MAAM,EAAEQ,cADZ;AAEI,EAAA,UAAU,EAAEd,gBAAgB,CAACK,OAAD,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAKI,oBAAC,CAAD,CAAG,MAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACMY,MAAM,CAACC,IAAP,CAAYb,OAAZ,EAAqBI,GAArB,CAA0BU,QAAD,IACvB,oBAAC,UAAD,oBACQd,OAAO,CAACc,QAAD,CADf;AAEI,EAAA,SAAS,EAAErB,eAAe,CAACkB,aAAD,EAAgBX,OAAO,CAACc,QAAD,CAAvB,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF,CADN,CALJ,EAaI,oBAAC,CAAD,CAAG,KAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,CAAD,CAAG,KAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACMjB,UAAU,CAACa,SAAD,EAAYX,aAAZ,EAA2BC,OAA3B,EAAoCC,WAApC,CADhB,CADJ,CAbJ,CARJ;;AA6BA,eAAeO,UAAf","sourcesContent":["import * as React from 'react';\n\nimport { Screen } from '@components/core/Screen';\n\nimport { Cell } from  './components/Cell';\nimport { PlayerInfo } from './components/PlayerInfo';\nimport { WinModal } from './components/WinModal';\n\nimport { isCurrentPlayer, getCellColor, getWinPlayerName } from './GameScreen.utils';\n\nimport * as S from './GameScreen.style';\n\ninterface IProps {\n    isWinModalOpen: boolean,\n    selectedCells: CellsType,\n    boardSize: number,\n    currentPlayer: PlayerType,\n    players: PlayersType,\n    onCellClick(row: number, column: number): void\n};\n\nconst renderRows = (\n    size: number,\n    selectedCells: CellsType,\n    players: PlayersType,\n    onCellClick: (row: number, column: number) => void\n) => \n    Array.from(Array(size)).map((value, rowIndex) => (\n        <S.Row key={rowIndex}>\n            { Array.from(Array(size)).map((value, columnIndex) => (\n                <Cell\n                    key={columnIndex}\n                    color={getCellColor(rowIndex, columnIndex, players, selectedCells)}\n                    onClick={() => { onCellClick(rowIndex, columnIndex) }}\n                />\n            ))}\n        </S.Row>\n    ));\n\nconst GameScreen: React.FC<IProps> = ({\n    isWinModalOpen,\n    selectedCells,\n    boardSize,\n    currentPlayer,\n    players,\n    onCellClick\n}) => (\n    <Screen>\n        <WinModal\n            isOpen={isWinModalOpen}\n            playerName={getWinPlayerName(players)}\n        />\n        <S.Header>\n            { Object.keys(players).map((playerId) => (\n                <PlayerInfo\n                    {...players[playerId]}\n                    isCurrent={isCurrentPlayer(currentPlayer, players[playerId])}\n                />\n            ))}\n        </S.Header>\n        <S.Inner>\n            <S.Board>\n                { renderRows(boardSize, selectedCells, players, onCellClick) }\n            </S.Board>\n        </S.Inner>\n    </Screen>\n);\n\nexport default GameScreen;"]},"metadata":{},"sourceType":"module"}