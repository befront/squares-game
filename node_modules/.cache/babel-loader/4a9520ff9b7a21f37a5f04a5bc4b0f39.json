{"ast":null,"code":"import uuid from 'uuid/v1';\nimport { getRandomColor } from './Game.utils';\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_BOARD_SIZE':\n      {\n        const {\n          size\n        } = action.payload;\n        return { ...state,\n          boardSize: +size\n        };\n      }\n\n    case 'CREATE_PLAYER':\n      {\n        const playerId = uuid();\n        return { ...state,\n          players: { ...state.players,\n            [playerId]: {\n              id: playerId,\n              name: '',\n              points: 0,\n              color: getRandomColor()\n            }\n          }\n        };\n      }\n\n    case 'UPDATE_PLAYER':\n      {\n        const {\n          playerId,\n          name\n        } = action.payload;\n        const player = { ...state.players[playerId],\n          name\n        };\n        return { ...state,\n          players: { ...state.players,\n            [playerId]: player\n          }\n        };\n      }\n\n    case 'UPDATE_PLAYER_POINTS':\n      {\n        const {\n          playerId,\n          points\n        } = action.payload;\n        return { ...state,\n          players: { ...state.players,\n            [playerId]: { ...state.players[playerId],\n              points\n            }\n          }\n        };\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action.type}`);\n      }\n  }\n};","map":{"version":3,"sources":["/Users/vladislavkorzo/Work/squares-game/src/context/Game/Game.reducer.js"],"names":["uuid","getRandomColor","reducer","state","action","type","size","payload","boardSize","playerId","players","id","name","points","color","player","Error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AAEA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,gBAAL;AAAuB;AACnB,cAAM;AAAEC,UAAAA;AAAF,YAAWF,MAAM,CAACG,OAAxB;AAEA,eAAO,EACH,GAAGJ,KADA;AAEHK,UAAAA,SAAS,EAAE,CAACF;AAFT,SAAP;AAIH;;AACD,SAAK,eAAL;AAAsB;AAClB,cAAMG,QAAQ,GAAGT,IAAI,EAArB;AAEA,eAAO,EACH,GAAGG,KADA;AAEHO,UAAAA,OAAO,EAAE,EACL,GAAGP,KAAK,CAACO,OADJ;AAEL,aAACD,QAAD,GAAY;AACRE,cAAAA,EAAE,EAAEF,QADI;AAERG,cAAAA,IAAI,EAAE,EAFE;AAGRC,cAAAA,MAAM,EAAE,CAHA;AAIRC,cAAAA,KAAK,EAAEb,cAAc;AAJb;AAFP;AAFN,SAAP;AAYH;;AACD,SAAK,eAAL;AAAsB;AAClB,cAAM;AAAEQ,UAAAA,QAAF;AAAYG,UAAAA;AAAZ,YAAqBR,MAAM,CAACG,OAAlC;AAEA,cAAMQ,MAAM,GAAG,EAAE,GAAGZ,KAAK,CAACO,OAAN,CAAcD,QAAd,CAAL;AAA8BG,UAAAA;AAA9B,SAAf;AAEA,eAAO,EACH,GAAGT,KADA;AAEHO,UAAAA,OAAO,EAAE,EACL,GAAGP,KAAK,CAACO,OADJ;AAEL,aAACD,QAAD,GAAYM;AAFP;AAFN,SAAP;AAOH;;AACD,SAAK,sBAAL;AAA6B;AACzB,cAAM;AAAEN,UAAAA,QAAF;AAAYI,UAAAA;AAAZ,YAAuBT,MAAM,CAACG,OAApC;AAEA,eAAO,EACH,GAAGJ,KADA;AAEHO,UAAAA,OAAO,EAAE,EACL,GAAGP,KAAK,CAACO,OADJ;AAEL,aAACD,QAAD,GAAY,EACR,GAAGN,KAAK,CAACO,OAAN,CAAcD,QAAd,CADK;AAERI,cAAAA;AAFQ;AAFP;AAFN,SAAP;AAUH;;AACD;AAAS;AACL,cAAM,IAAIG,KAAJ,CAAW,0BAAyBZ,MAAM,CAACC,IAAK,EAAhD,CAAN;AACH;AAtDL;AAwDH,CAzDM","sourcesContent":["import uuid from 'uuid/v1';\n\nimport { getRandomColor } from './Game.utils';\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_BOARD_SIZE': {\n            const { size } = action.payload;\n\n            return {\n                ...state,\n                boardSize: +size\n            };\n        }\n        case 'CREATE_PLAYER': {\n            const playerId = uuid();\n\n            return {\n                ...state,\n                players: {\n                    ...state.players,\n                    [playerId]: {\n                        id: playerId,\n                        name: '',\n                        points: 0,\n                        color: getRandomColor()\n                    }\n                }\n            };\n        }\n        case 'UPDATE_PLAYER': {\n            const { playerId, name } = action.payload;\n\n            const player = { ...state.players[playerId], name };\n\n            return {\n                ...state,\n                players: {\n                    ...state.players,\n                    [playerId]: player\n                }\n            }\n        }\n        case 'UPDATE_PLAYER_POINTS': {\n            const { playerId, points } = action.payload;\n\n            return {\n                ...state,\n                players: {\n                    ...state.players,\n                    [playerId]: {\n                        ...state.players[playerId],\n                        points\n                    } \n                }\n            }\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action.type}`);\n        }\n    }\n};"]},"metadata":{},"sourceType":"module"}