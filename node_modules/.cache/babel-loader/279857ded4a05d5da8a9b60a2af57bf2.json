{"ast":null,"code":"var _jsxFileName = \"/Users/vladislavkorzo/Work/squares-game/src/components/screens/CreatePlayers/CreatePlayersScreen.container.tsx\";\nimport * as React from 'react';\nimport { SCREENS } from '@constants';\nimport { useGame } from '@context/Game';\nimport { PLAYERS_COUNT } from './CreatePlayersScreen.constants';\nimport CreatePlayersScreen from './CreatePlayersScreen';\n\nconst CreatePlayersScreenContainer = ({\n  setCurrentScreen\n}) => {\n  const [game, dispatchGame] = useGame();\n  React.useEffect(() => {\n    if (!Object.keys(game.players).length) {\n      for (let i = 0; i < PLAYERS_COUNT; i++) {\n        dispatchGame({\n          type: 'CREATE_PLAYER'\n        });\n      }\n    }\n  }, [dispatchGame, game.players]);\n\n  const handleContinueClick = () => {\n    if (hasPlayersNames(players)) {\n      setCurrentScreen(SCREENS.GAME);\n    }\n  };\n\n  const handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    dispatchGame({\n      type: 'UPDATE_PLAYER',\n      payload: {\n        playerId: name,\n        name: value\n      }\n    });\n  };\n\n  console.log(game.players);\n  return React.createElement(CreatePlayersScreen, {\n    players: game.players,\n    onInputChange: handleInputChange,\n    onContinueClick: handleContinueClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  });\n};\n\nexport default CreatePlayersScreenContainer;","map":{"version":3,"sources":["/Users/vladislavkorzo/Work/squares-game/src/components/screens/CreatePlayers/CreatePlayersScreen.container.tsx"],"names":["React","SCREENS","useGame","PLAYERS_COUNT","CreatePlayersScreen","CreatePlayersScreenContainer","setCurrentScreen","game","dispatchGame","useEffect","Object","keys","players","length","i","type","handleContinueClick","hasPlayersNames","GAME","handleInputChange","event","name","target","value","payload","playerId","console","log"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAT,QAAwB,YAAxB;AAEA,SAASC,OAAT,QAAwB,eAAxB;AAEA,SAASC,aAAT,QAA8B,iCAA9B;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAMA,MAAMC,4BAA8C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AAC7E,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBN,OAAO,EAApC;AAEAF,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AAClB,QAAI,CAACC,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACK,OAAjB,EAA0BC,MAA/B,EAAuC;AACnC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,aAApB,EAAmCW,CAAC,EAApC,EAAwC;AACpCN,QAAAA,YAAY,CAAC;AACTO,UAAAA,IAAI,EAAE;AADG,SAAD,CAAZ;AAGH;AACJ;AACJ,GARD,EAQG,CAACP,YAAD,EAAeD,IAAI,CAACK,OAApB,CARH;;AAUA,QAAMI,mBAAmB,GAAG,MAAM;AAC9B,QAAIC,eAAe,CAACL,OAAD,CAAnB,EAA8B;AAC1BN,MAAAA,gBAAgB,CAACL,OAAO,CAACiB,IAAT,CAAhB;AACH;AACJ,GAJD;;AAMA,QAAMC,iBAAiB,GAAIC,KAAD,IAAgD;AACtE,UAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,UAAME,KAAK,GAAGH,KAAK,CAACE,MAAN,CAAaC,KAA3B;AAEAf,IAAAA,YAAY,CAAC;AACTO,MAAAA,IAAI,EAAE,eADG;AAETS,MAAAA,OAAO,EAAE;AACLC,QAAAA,QAAQ,EAAEJ,IADL;AAELA,QAAAA,IAAI,EAAEE;AAFD;AAFA,KAAD,CAAZ;AAOH,GAXD;;AAaAG,EAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAI,CAACK,OAAjB;AAEA,SACI,oBAAC,mBAAD;AACI,IAAA,OAAO,EAAEL,IAAI,CAACK,OADlB;AAEI,IAAA,aAAa,EAAEO,iBAFnB;AAGI,IAAA,eAAe,EAAEH,mBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAOH,CAzCD;;AA2CA,eAAeX,4BAAf","sourcesContent":["import * as React from 'react';\n\nimport { SCREENS } from '@constants';\n\nimport { useGame } from '@context/Game';\n\nimport { PLAYERS_COUNT } from './CreatePlayersScreen.constants';\n\nimport CreatePlayersScreen from './CreatePlayersScreen';\n\ninterface IProps {\n    setCurrentScreen(screen: string): void\n}\n\nconst CreatePlayersScreenContainer: React.FC<IProps> = ({ setCurrentScreen }) => {\n    const [game, dispatchGame] = useGame();\n\n    React.useEffect(() => {\n        if (!Object.keys(game.players).length) {\n            for (let i = 0; i < PLAYERS_COUNT; i++) {\n                dispatchGame({\n                    type: 'CREATE_PLAYER'\n                });\n            }\n        }\n    }, [dispatchGame, game.players]);\n    \n    const handleContinueClick = () => {\n        if (hasPlayersNames(players)) {\n            setCurrentScreen(SCREENS.GAME);\n        }\n    };\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        dispatchGame({\n            type: 'UPDATE_PLAYER',\n            payload: {\n                playerId: name,\n                name: value\n            }\n        });\n    };\n\n    console.log(game.players);\n\n    return (\n        <CreatePlayersScreen\n            players={game.players}\n            onInputChange={handleInputChange}\n            onContinueClick={handleContinueClick}\n        />\n    );\n};\n\nexport default CreatePlayersScreenContainer;"]},"metadata":{},"sourceType":"module"}