{"ast":null,"code":"var _jsxFileName = \"/Users/vladislavkorzo/Work/squares-game/src/components/screens/Game/GameScreen.container.tsx\";\nimport * as React from 'react';\nimport { useGame } from '@context/Game';\nimport { getNextPlayer, getRandomPlayer, getPlayerPoints } from './GameScreen.utils';\nimport GameScreen from './GameScreen';\n\nconst GameScreenContainer = ({\n  setCurrentScreen\n}) => {\n  const [game, dispatchGame] = useGame();\n  const [isWinModalOpen, setIsWinModalOpen] = React.useState(true);\n  const [selectedCells, setSelectedCells] = React.useState({});\n  const [currentPlayer, setCurrentPlayer] = React.useState(getRandomPlayer(game.players));\n\n  const handleCellClick = (rowIndex, columnIndex) => {\n    const cellKey = `${rowIndex}:${columnIndex}`;\n    const cells = { ...selectedCells\n    };\n\n    if (!cells[cellKey]) {\n      cells[cellKey] = {\n        playerId: currentPlayer.id,\n        rowIndex,\n        columnIndex\n      };\n      ;\n      const playerCells = Object.values(cells).filter(cell => cell.playerId === currentPlayer.id);\n      const points = getPlayerPoints(playerCells);\n\n      if (!currentPlayer.points || points > 1 && points !== currentPlayer.points) {\n        dispatchGame({\n          type: 'UPDATE_PLAYER_POINTS',\n          payload: {\n            playerId: currentPlayer.id,\n            points: !currentPlayer.points ? 1 : points\n          }\n        });\n      }\n\n      setSelectedCells(cells);\n      setCurrentPlayer(getNextPlayer(currentPlayer, game.players));\n    }\n\n    if (Object.keys(cells).length === game.boardSize * game.boardSize) {\n      setIsWinModalOpen(true);\n    }\n  };\n\n  return React.createElement(GameScreen, {\n    isWinModalOpen: isWinModalOpen,\n    currentPlayer: currentPlayer,\n    selectedCells: selectedCells,\n    boardSize: game.boardSize,\n    players: game.players,\n    setIsWinModalOpen: setIsWinModalOpen,\n    setSelectedCells: setSelectedCells,\n    setCurrentScreen: setCurrentScreen,\n    onCellClick: handleCellClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  });\n};\n\nexport default GameScreenContainer;","map":{"version":3,"sources":["/Users/vladislavkorzo/Work/squares-game/src/components/screens/Game/GameScreen.container.tsx"],"names":["React","useGame","getNextPlayer","getRandomPlayer","getPlayerPoints","GameScreen","GameScreenContainer","setCurrentScreen","game","dispatchGame","isWinModalOpen","setIsWinModalOpen","useState","selectedCells","setSelectedCells","currentPlayer","setCurrentPlayer","players","handleCellClick","rowIndex","columnIndex","cellKey","cells","playerId","id","playerCells","Object","values","filter","cell","points","type","payload","keys","length","boardSize"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAT,QAAwB,eAAxB;AAEA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,eAAzC,QAAgE,oBAAhE;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAMA,MAAMC,mBAAqC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AACpE,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBR,OAAO,EAApC;AAEA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCX,KAAK,CAACY,QAAN,CAAe,IAAf,CAA5C;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,KAAK,CAACY,QAAN,CAAe,EAAf,CAA1C;AACA,QAAM,CAACG,aAAD,EAAgBC,gBAAhB,IAAoChB,KAAK,CAACY,QAAN,CAAeT,eAAe,CAACK,IAAI,CAACS,OAAN,CAA9B,CAA1C;;AAEA,QAAMC,eAAe,GAAG,CAACC,QAAD,EAAmBC,WAAnB,KAA2C;AAC/D,UAAMC,OAAO,GAAI,GAAEF,QAAS,IAAGC,WAAY,EAA3C;AAEA,UAAME,KAAgB,GAAG,EAAE,GAAGT;AAAL,KAAzB;;AAEA,QAAI,CAACS,KAAK,CAACD,OAAD,CAAV,EAAqB;AACjBC,MAAAA,KAAK,CAACD,OAAD,CAAL,GAAiB;AACbE,QAAAA,QAAQ,EAAER,aAAa,CAACS,EADX;AAEbL,QAAAA,QAFa;AAGbC,QAAAA;AAHa,OAAjB;AAIE;AAEF,YAAMK,WAAuB,GAAGC,MAAM,CAACC,MAAP,CAAcL,KAAd,EAAqBM,MAArB,CAA4BC,IAAI,IAAIA,IAAI,CAACN,QAAL,KAAkBR,aAAa,CAACS,EAApE,CAAhC;AAEA,YAAMM,MAAM,GAAG1B,eAAe,CAACqB,WAAD,CAA9B;;AAEA,UAAI,CAACV,aAAa,CAACe,MAAf,IAA0BA,MAAM,GAAG,CAAT,IAAcA,MAAM,KAAKf,aAAa,CAACe,MAArE,EAA8E;AAC1ErB,QAAAA,YAAY,CAAC;AACTsB,UAAAA,IAAI,EAAE,sBADG;AAETC,UAAAA,OAAO,EAAE;AACLT,YAAAA,QAAQ,EAAER,aAAa,CAACS,EADnB;AAELM,YAAAA,MAAM,EAAE,CAACf,aAAa,CAACe,MAAf,GAAwB,CAAxB,GAA4BA;AAF/B;AAFA,SAAD,CAAZ;AAOH;;AAEDhB,MAAAA,gBAAgB,CAACQ,KAAD,CAAhB;AAEAN,MAAAA,gBAAgB,CAACd,aAAa,CAACa,aAAD,EAAgBP,IAAI,CAACS,OAArB,CAAd,CAAhB;AACH;;AAED,QAAIS,MAAM,CAACO,IAAP,CAAYX,KAAZ,EAAmBY,MAAnB,KAA8B1B,IAAI,CAAC2B,SAAL,GAAiB3B,IAAI,CAAC2B,SAAxD,EAAmE;AAC/DxB,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ,GAlCD;;AAoCA,SACI,oBAAC,UAAD;AACI,IAAA,cAAc,EAAED,cADpB;AAEI,IAAA,aAAa,EAAEK,aAFnB;AAGI,IAAA,aAAa,EAAEF,aAHnB;AAII,IAAA,SAAS,EAAEL,IAAI,CAAC2B,SAJpB;AAKI,IAAA,OAAO,EAAE3B,IAAI,CAACS,OALlB;AAMI,IAAA,iBAAiB,EAAEN,iBANvB;AAOI,IAAA,gBAAgB,EAAEG,gBAPtB;AAQI,IAAA,gBAAgB,EAAEP,gBARtB;AASI,IAAA,WAAW,EAAEW,eATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAaH,CAxDD;;AA0DA,eAAeZ,mBAAf","sourcesContent":["import * as React from 'react';\n\nimport { useGame } from '@context/Game';\n\nimport { getNextPlayer, getRandomPlayer, getPlayerPoints } from './GameScreen.utils';\n\nimport GameScreen from './GameScreen';\n\ninterface IProps {\n    setCurrentScreen(screen: string): void\n}\n\nconst GameScreenContainer: React.FC<IProps> = ({ setCurrentScreen }) => {\n    const [game, dispatchGame] = useGame();\n\n    const [isWinModalOpen, setIsWinModalOpen] = React.useState(true);\n    const [selectedCells, setSelectedCells] = React.useState({});\n    const [currentPlayer, setCurrentPlayer] = React.useState(getRandomPlayer(game.players));\n\n    const handleCellClick = (rowIndex: number, columnIndex: number) => {\n        const cellKey = `${rowIndex}:${columnIndex}`;\n\n        const cells: CellsType = { ...selectedCells };\n\n        if (!cells[cellKey]) {\n            cells[cellKey] = {\n                playerId: currentPlayer.id,\n                rowIndex,\n                columnIndex\n            };;\n\n            const playerCells: CellType[] = Object.values(cells).filter(cell => cell.playerId === currentPlayer.id);\n\n            const points = getPlayerPoints(playerCells);\n\n            if (!currentPlayer.points || (points > 1 && points !== currentPlayer.points)) {\n                dispatchGame({\n                    type: 'UPDATE_PLAYER_POINTS',\n                    payload: {\n                        playerId: currentPlayer.id,\n                        points: !currentPlayer.points ? 1 : points\n                    }\n                })\n            }\n\n            setSelectedCells(cells);\n\n            setCurrentPlayer(getNextPlayer(currentPlayer, game.players));\n        }\n\n        if (Object.keys(cells).length === game.boardSize * game.boardSize) {\n            setIsWinModalOpen(true);\n        }\n    };\n\n    return (\n        <GameScreen\n            isWinModalOpen={isWinModalOpen}\n            currentPlayer={currentPlayer}\n            selectedCells={selectedCells}\n            boardSize={game.boardSize}\n            players={game.players}\n            setIsWinModalOpen={setIsWinModalOpen}\n            setSelectedCells={setSelectedCells}\n            setCurrentScreen={setCurrentScreen}\n            onCellClick={handleCellClick}\n        />\n    );\n};\n\nexport default GameScreenContainer;"]},"metadata":{},"sourceType":"module"}